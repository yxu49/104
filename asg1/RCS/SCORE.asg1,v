head	1.2;
access;
symbols;
locks;
comment	@# @;


1.2
date	2015.10.01.21.25.51;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.03.17.22.42.29;	author -;	state -;
branches;
next	;


desc
@@


1.2
log
@-
@
text
@$Id: SCORE.asg1,v 1.1 2015-03-17 15:42:29-07 - - $

Copy this file and all test files into the submit directory.
Run the script mk.build then mk.test.
After each item below, indicate with a negative number the
reason for each point deduction.

=================================================================

SOURCE CODE /30 points

    mk.build

    (3) checksource did not complain.  If it does, deduct
        minimum (3, int (complaints / 5))
        (But do not deduct for flex/bison generated code).

    (3) Good overall coding style, choice of identifiers,
        readability indentation.

    (3) Code run through cpp and output examined.

    (3) intern function returns a pointer to a string

    (3) hash table intern function only interns a string once

    (3) uses unordered_set (hash table) to manage symbols

    (3) uses getopt to analyze options

    (3) error messages to stderr, not stdout

    (3) programs compile without errors or warnings from gcc

    (3) Filenames and suffices as appropriate

total source points=
min 3, max 30

=================================================================

PROGRAM TESTING /30 points

    mk.tests

    If an executable called oc was not built by make, skip this
    section and assign 0 points.

    (3) exit status 0 for successful compiles, non-zero for fail

    (3) unordered_set properly printed out as per asg1 spec.

    (3) reports on any errors from cpp by exit status 1

    (3) reads all white-space delimited words from input files

    (3) nothing printed to stdout.

    (6) Deduct 2 points, max 6, for each run that reports a
        seg fault, dumps core, etc.

    (9) output files for foo.oc called foo.str with correctly
        formatted contents, deduct 2 points for each which is not,
        but not more than 9 points
	It is okay to create an empty .str file if string table is empty

total testing points=
min 0, max 30

=================================================================

TOTALSCORE=
min 1, max 60

@


1.1
log
@-
@
text
@d1 1
a1 1
$Id: SCORE.asg1,v 1.1 2014-10-30 15:20:19-07 - - $
d23 1
a23 1
    (3) ?????????? (ignore this - requirement deleted)
d27 1
a27 2
    (3) collision resolution method, either probing or chaining
        and array doubling code
d51 1
a51 1
    (3) collision resolution chains all short or clusters all amall
d55 1
a55 1
    (3) reads all tokens from input files
@
